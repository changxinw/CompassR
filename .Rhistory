}
gene = "HEY2"
assembly = "hg38"
group_df = sample_df[order(sample_df$Group), ]
link_gene_df = link_df[link_df$gene == gene & link_df$sample %in% group_df$Sample, ]
### prepare dataframe
if (length(unique(link_gene_df$sample_id))<=2){ return(NULL) }
### plot
# annot_plot = plot_annotation_bar(group_df)
# expr_plot = plot_expr_barplot(expr_df, annot_plot)
track_plot = plot_genome_track(link_gene_df, gene, assembly, group_df$Sample)
# p_track = ggplotify::as.ggplot(~Gviz::plotTracks(track_plot[[1]], from = track_plot[[3]], to = track_plot[[4]]), envir=environment())
# pdf(output_file, width = width, height = height)
# p = combind_plots(p_track, annot_plot, expr_plot, track_plot[[2]], ...)
# print(p)
# dev.off()
# return(p)
plot_genome_track <- function(df, gene, assembly, sample_ids, min_x = NULL, max_x = NULL){
bm_host = "https://nov2020.archive.ensembl.org"
if (assembly == "mm10"){
bm <- biomaRt::useEnsembl(host = bm_host,
biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "mmusculus_gene_ensembl") #hsapiens_gene_ensembl
grtrack <- Gviz::BiomartGeneRegionTrack(genome = "mm10",
name = "Gene",
symbol = gene,
biomart = bm,
transcriptAnnotation = "symbol",
collapseTranscripts = "longest",
filters=list(mgi_symbol=gene) ### 'hgnc_symbol''mgi_symbol''uniprot_gn_symbol'
# stacking = "hide"
)
} else if (assembly == "hg38"){
bm <- biomaRt::useEnsembl(host = bm_host,
biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl") #hsapiens_gene_ensembl
grtrack <- Gviz::BiomartGeneRegionTrack(genome = "hg38",
name = "Gene",
symbol = gene,
biomart = bm,
transcriptAnnotation = "symbol",
collapseTranscripts = "longest",
filters=list(hgnc_symbol=gene) ### 'hgnc_symbol''mgi_symbol''uniprot_gn_symbol'
# stacking = "hide"
)
}
df_gr = df %>%
pivot_wider(names_from = sample_id, values_from = zscore, id_cols = c('chromosome', 'start', 'end')) %>%
makeGRangesFromDataFrame(seqnames.field="chromosome", start.field="start", end.field="end", keep.extra.columns=TRUE, ignore.strand=TRUE)
df_gr@elementMetadata = df_gr@elementMetadata[, sample_ids]
genome(df_gr) = assembly
chr <- as.character(unique(seqnames(df_gr)))
colors = colorRampPalette(brewer.pal(n = 9, name = "Blues")[5:9])(100)
cre_track = DataTrack(df_gr, name = "Link",
type = "heatmap", showSampleNames = TRUE,
cex.sampleNames = 0.6, col.sampleNames = "black",
gradient = colors, cex.axis = 0.5)#, groups = rep(c("male", "female"), each = 4)
if (is.null(min_x) & is.null(max_x)) {
min_x = min(start(cre_track@range))#min(min(start(cre_track@range)), min(start(grtrack@range)))
max_x = max(end(cre_track@range))#max(max(end(cre_track@range)), max(end(grtrack@range)))
xwidth = max_x - min_x
} else {
xwidth = 0
}
itrack <- IdeogramTrack(genome = assembly, chromosome = chr)
gtrack <- GenomeAxisTrack()
### add additional track as peaks panel, should combine individual peaks first
peak_gr = GenomicRanges::reduce(df_gr, min.gapwidth=1L)
peak_gr$name = 1:length(peak_gr)
peak_track = AnnotationTrack(peak_gr, id = peak_gr$name, name = "Peak", showFeatureId=TRUE, stacking = "squish", fontcolor.item="black", cex.feature = 0.5)
# stacking(peak_track) <- "full"
# p_peak = as.ggplot(~Gviz::plotTracks(peak_track, from = min_x - 0.05*xwidth, to = max_x + 0.05*xwidth, stacking = "dense"))
### get plot result
track_list = list(itrack, gtrack, cre_track, peak_track, grtrack)
all_tracks = Gviz::plotTracks(track_list, from = min_x - 0.05*xwidth, to = max_x + 0.05*xwidth)
# gviz_obj = ~Gviz::plotTracks(track_list, from = min_x - 0.05*xwidth, to = max_x + 0.05*xwidth)
# p_all = as.ggplot(~Gviz::plotTracks(track_list, from = min_x - 0.05*xwidth, to = max_x + 0.05*xwidth))
graph_width = as.data.frame(all_tracks$titles@coords)
graph_width$width = graph_width$y2 - graph_width$y1
return(list(track_list, graph_width, min_x - 0.05*xwidth, max_x + 0.05*xwidth, peak_gr))
}
gene = "HEY2"
assembly = "hg38"
group_df = sample_df[order(sample_df$Group), ]
link_gene_df = link_df[link_df$gene == gene & link_df$sample %in% group_df$Sample, ]
### prepare dataframe
if (length(unique(link_gene_df$sample_id))<=2){ return(NULL) }
### plot
# annot_plot = plot_annotation_bar(group_df)
# expr_plot = plot_expr_barplot(expr_df, annot_plot)
track_plot = plot_genome_track(link_gene_df, gene, assembly, group_df$Sample)
# p_track = ggplotify::as.ggplot(~Gviz::plotTracks(track_plot[[1]], from = track_plot[[3]], to = track_plot[[4]]), envir=environment())
# pdf(output_file, width = width, height = height)
# p = combind_plots(p_track, annot_plot, expr_plot, track_plot[[2]], ...)
# print(p)
# dev.off()
# return(p)
plot_genome_track <- function(df, gene, assembly, sample_ids, min_x = NULL, max_x = NULL){
bm_host = "https://nov2020.archive.ensembl.org"
if (assembly == "mm10"){
bm <- biomaRt::useEnsembl(host = bm_host,
biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "mmusculus_gene_ensembl") #hsapiens_gene_ensembl
grtrack <- Gviz::BiomartGeneRegionTrack(genome = "mm10",
name = "Gene",
symbol = gene,
biomart = bm,
transcriptAnnotation = "symbol",
collapseTranscripts = "longest",
filters=list(mgi_symbol=gene) ### 'hgnc_symbol''mgi_symbol''uniprot_gn_symbol'
# stacking = "hide"
)
} else if (assembly == "hg38"){
bm <- biomaRt::useEnsembl(host = bm_host,
biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl") #hsapiens_gene_ensembl
grtrack <- Gviz::BiomartGeneRegionTrack(genome = "hg38",
name = "Gene",
symbol = gene,
biomart = bm,
transcriptAnnotation = "symbol",
collapseTranscripts = "longest",
filters=list(hgnc_symbol=gene) ### 'hgnc_symbol''mgi_symbol''uniprot_gn_symbol'
# stacking = "hide"
)
}
df_gr = df %>%
pivot_wider(names_from = sample_id, values_from = zscore, id_cols = c('chromosome', 'start', 'end')) %>%
makeGRangesFromDataFrame(seqnames.field="chromosome", start.field="start", end.field="end", keep.extra.columns=TRUE, ignore.strand=TRUE)
df_gr@elementMetadata = df_gr@elementMetadata[, sample_ids]
genome(df_gr) = assembly
chr <- as.character(unique(seqnames(df_gr)))
colors = colorRampPalette(brewer.pal(n = 9, name = "Blues")[5:9])(100)
cre_track = DataTrack(df_gr, name = "Link",
type = "heatmap", showSampleNames = TRUE,
cex.sampleNames = 0.6, col.sampleNames = "black",
gradient = colors, cex.axis = 0.8)#, groups = rep(c("male", "female"), each = 4)
if (is.null(min_x) & is.null(max_x)) {
min_x = min(start(cre_track@range))#min(min(start(cre_track@range)), min(start(grtrack@range)))
max_x = max(end(cre_track@range))#max(max(end(cre_track@range)), max(end(grtrack@range)))
xwidth = max_x - min_x
} else {
xwidth = 0
}
itrack <- IdeogramTrack(genome = assembly, chromosome = chr)
gtrack <- GenomeAxisTrack()
### add additional track as peaks panel, should combine individual peaks first
peak_gr = GenomicRanges::reduce(df_gr, min.gapwidth=1L)
peak_gr$name = 1:length(peak_gr)
peak_track = AnnotationTrack(peak_gr, id = peak_gr$name, name = "Peak", showFeatureId=TRUE, stacking = "squish", fontcolor.item="black", cex.feature = 0.5)
# stacking(peak_track) <- "full"
# p_peak = as.ggplot(~Gviz::plotTracks(peak_track, from = min_x - 0.05*xwidth, to = max_x + 0.05*xwidth, stacking = "dense"))
### get plot result
track_list = list(itrack, gtrack, cre_track, peak_track, grtrack)
all_tracks = Gviz::plotTracks(track_list, from = min_x - 0.05*xwidth, to = max_x + 0.05*xwidth)
# gviz_obj = ~Gviz::plotTracks(track_list, from = min_x - 0.05*xwidth, to = max_x + 0.05*xwidth)
# p_all = as.ggplot(~Gviz::plotTracks(track_list, from = min_x - 0.05*xwidth, to = max_x + 0.05*xwidth))
graph_width = as.data.frame(all_tracks$titles@coords)
graph_width$width = graph_width$y2 - graph_width$y1
return(list(track_list, graph_width, min_x - 0.05*xwidth, max_x + 0.05*xwidth, peak_gr))
}
gene = "HEY2"
assembly = "hg38"
group_df = sample_df[order(sample_df$Group), ]
link_gene_df = link_df[link_df$gene == gene & link_df$sample %in% group_df$Sample, ]
### prepare dataframe
if (length(unique(link_gene_df$sample_id))<=2){ return(NULL) }
### plot
# annot_plot = plot_annotation_bar(group_df)
# expr_plot = plot_expr_barplot(expr_df, annot_plot)
track_plot = plot_genome_track(link_gene_df, gene, assembly, group_df$Sample)
# p_track = ggplotify::as.ggplot(~Gviz::plotTracks(track_plot[[1]], from = track_plot[[3]], to = track_plot[[4]]), envir=environment())
# pdf(output_file, width = width, height = height)
# p = combind_plots(p_track, annot_plot, expr_plot, track_plot[[2]], ...)
# print(p)
# dev.off()
# return(p)
plot_genome_track <- function(df, gene, assembly, sample_ids, min_x = NULL, max_x = NULL){
bm_host = "https://nov2020.archive.ensembl.org"
if (assembly == "mm10"){
bm <- biomaRt::useEnsembl(host = bm_host,
biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "mmusculus_gene_ensembl") #hsapiens_gene_ensembl
grtrack <- Gviz::BiomartGeneRegionTrack(genome = "mm10",
name = "Gene",
symbol = gene,
biomart = bm,
transcriptAnnotation = "symbol",
collapseTranscripts = "longest",
filters=list(mgi_symbol=gene) ### 'hgnc_symbol''mgi_symbol''uniprot_gn_symbol'
# stacking = "hide"
)
} else if (assembly == "hg38"){
bm <- biomaRt::useEnsembl(host = bm_host,
biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl") #hsapiens_gene_ensembl
grtrack <- Gviz::BiomartGeneRegionTrack(genome = "hg38",
name = "Gene",
symbol = gene,
biomart = bm,
transcriptAnnotation = "symbol",
collapseTranscripts = "longest",
filters=list(hgnc_symbol=gene) ### 'hgnc_symbol''mgi_symbol''uniprot_gn_symbol'
# stacking = "hide"
)
}
df_gr = df %>%
pivot_wider(names_from = sample_id, values_from = zscore, id_cols = c('chromosome', 'start', 'end')) %>%
makeGRangesFromDataFrame(seqnames.field="chromosome", start.field="start", end.field="end", keep.extra.columns=TRUE, ignore.strand=TRUE)
df_gr@elementMetadata = df_gr@elementMetadata[, sample_ids]
genome(df_gr) = assembly
chr <- as.character(unique(seqnames(df_gr)))
colors = colorRampPalette(brewer.pal(n = 9, name = "Blues")[5:9])(100)
cre_track = DataTrack(df_gr, name = "Link",
type = "heatmap", showSampleNames = TRUE,
cex.sampleNames = 0.6, col.sampleNames = "black",
gradient = colors, cex.axis = 1)#, groups = rep(c("male", "female"), each = 4)
if (is.null(min_x) & is.null(max_x)) {
min_x = min(start(cre_track@range))#min(min(start(cre_track@range)), min(start(grtrack@range)))
max_x = max(end(cre_track@range))#max(max(end(cre_track@range)), max(end(grtrack@range)))
xwidth = max_x - min_x
} else {
xwidth = 0
}
itrack <- IdeogramTrack(genome = assembly, chromosome = chr)
gtrack <- GenomeAxisTrack()
### add additional track as peaks panel, should combine individual peaks first
peak_gr = GenomicRanges::reduce(df_gr, min.gapwidth=1L)
peak_gr$name = 1:length(peak_gr)
peak_track = AnnotationTrack(peak_gr, id = peak_gr$name, name = "Peak", showFeatureId=TRUE, stacking = "squish", fontcolor.item="black", cex.feature = 0.5)
# stacking(peak_track) <- "full"
# p_peak = as.ggplot(~Gviz::plotTracks(peak_track, from = min_x - 0.05*xwidth, to = max_x + 0.05*xwidth, stacking = "dense"))
### get plot result
track_list = list(itrack, gtrack, cre_track, peak_track, grtrack)
all_tracks = Gviz::plotTracks(track_list, from = min_x - 0.05*xwidth, to = max_x + 0.05*xwidth)
# gviz_obj = ~Gviz::plotTracks(track_list, from = min_x - 0.05*xwidth, to = max_x + 0.05*xwidth)
# p_all = as.ggplot(~Gviz::plotTracks(track_list, from = min_x - 0.05*xwidth, to = max_x + 0.05*xwidth))
graph_width = as.data.frame(all_tracks$titles@coords)
graph_width$width = graph_width$y2 - graph_width$y1
return(list(track_list, graph_width, min_x - 0.05*xwidth, max_x + 0.05*xwidth, peak_gr))
}
gene = "HEY2"
assembly = "hg38"
group_df = sample_df[order(sample_df$Group), ]
link_gene_df = link_df[link_df$gene == gene & link_df$sample %in% group_df$Sample, ]
### prepare dataframe
if (length(unique(link_gene_df$sample_id))<=2){ return(NULL) }
### plot
# annot_plot = plot_annotation_bar(group_df)
# expr_plot = plot_expr_barplot(expr_df, annot_plot)
track_plot = plot_genome_track(link_gene_df, gene, assembly, group_df$Sample)
# p_track = ggplotify::as.ggplot(~Gviz::plotTracks(track_plot[[1]], from = track_plot[[3]], to = track_plot[[4]]), envir=environment())
# pdf(output_file, width = width, height = height)
# p = combind_plots(p_track, annot_plot, expr_plot, track_plot[[2]], ...)
# print(p)
# dev.off()
# return(p)
devtools::load_all()
library(scomicsdb)
library(httr)
library(jsonlite)
library(ggplot2)
library(cowplot)
library(ggforce)
library(dplyr)
library(Seurat)
library(Gviz)
library(GenomicRanges)
library(biomaRt)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(ggdendro)
library(cowplot)
library(ggtree) # install with `devtools::install_github("YuLab-SMU/ggtree")` as you need a version newer than what bioconductor serves
library(patchwork)
library(aplot)
library(ggplotify)
library(RColorBrewer)
gene = "HEY2"
celltype = "Cardiomyocyte"
expr_vec = query_exprssion("hg38", gene, celltype = TRUE)
link_res = query_linkage("hg38", gene, celltype = TRUE)
link_df = link_res[["linkage"]]
sample_df = link_res[["samples"]]
sample_df = sample_df[sample_df$bio_source %in% c("Heart right ventricle", "Left cardiac atrium"), ]
sample_df = sample_df[, c("sample_id", "bio_source")]
colnames(sample_df) = c("Sample", "Group")
link_df = link_df[link_df$sample %in% sample_df$Sample & link_df$celltype == celltype, ]
# link_df[, c("sample", "gene", "peak", "zscore", "source", "celltype")]
sample_df = sample_df[sample_df$Sample %in% link_df$sample, ]
sample_df = sample_df[order(sample_df$Group), ]
expr_df = data.frame(t(expr_vec)[paste0(sample_df$Sample, ".", celltype), ])
colnames(expr_df) = c("Gene")
rownames(expr_df) = sapply(rownames(expr_df), function(x) {unlist(strsplit(x, "\\."))[1]})
expr_df$Sample = rownames(expr_df)
link_df$sample_id = link_df$sample
nrow(link_df)
genome_track_map(link_df, sample_df, gene, expr_df, assembly = "hg38", legend.position="left", t = -20, b = 20)
genome_track_map(link_df, sample_df, gene, expr_df, assembly = "hg38", legend.position="left", t = -20, b = 20)
getOption("Gviz.scheme")
<- getScheme()
getScheme()
devtools::load_all()
rm(list = c("plot_genome_track"))
devtools::load_all()
## Which scheme is used?
getOption("Gviz.scheme")
## Change default settings for GeneRegionTrack
scheme <- getScheme()
scheme$GeneRegionTrack$fill <- "salmon"
scheme$GdObject$cex.axis = 1
## replace default scheme with myScheme
addScheme(scheme, "myScheme")
options(Gviz.scheme="myScheme")
getOption("Gviz.scheme")
### plot
# annot_plot = plot_annotation_bar(group_df)
# expr_plot = plot_expr_barplot(expr_df, annot_plot)
track_plot = plot_genome_track(link_gene_df, gene, assembly, group_df$Sample)
## Change default settings for GeneRegionTrack
scheme <- getScheme()
# scheme$GeneRegionTrack$fill <- "salmon"
# scheme$GeneRegionTrack$col <- NULL
# scheme$GeneRegionTrack$transcriptAnnotation <- "transcript"
scheme$GdObject$cex.axis = 1.5
## replace default scheme with myScheme
addScheme(scheme, "myScheme")
options(Gviz.scheme="myScheme")
getOption("Gviz.scheme")
### plot
# annot_plot = plot_annotation_bar(group_df)
# expr_plot = plot_expr_barplot(expr_df, annot_plot)
track_plot = plot_genome_track(link_gene_df, gene, assembly, group_df$Sample)
sample_df$Group
scheme <- getScheme()
scheme$GdObject$cex.axis = 1
addScheme(scheme, "myScheme")
options(Gviz.scheme="myScheme")
sample_df$Group = c(rep("Ventricle", 2), rep("Atrium", 2))
genome_track_map(link_df, sample_df, gene, expr_df, assembly = "hg38", legend.position="left", t = -20, b = 20)
scheme <- getScheme()
scheme$GdObject$cex.axis = 1
addScheme(scheme, "myScheme")
options(Gviz.scheme="myScheme")
sample_df$Group = c(rep("Ventricle", 2), rep("Atrium", 2))
pdf("Heatmap_celltype_cadiomyocytes_HEY2.pdf", width = 8, height = 6)
genome_track_map(link_df, sample_df, gene, expr_df, assembly = "hg38", legend.position="left", t = -20, b = 20)
dev.off()
scheme <- getScheme()
scheme$GdObject$cex.axis = 1
addScheme(scheme, "myScheme")
options(Gviz.scheme="myScheme")
sample_df$Group = c(rep("Ventricle", 2), rep("Atrium", 2))
pdf("Heatmap_celltype_cadiomyocytes_HEY2.pdf", width = 10, height = 6)
genome_track_map(link_df, sample_df, gene, expr_df, assembly = "hg38", legend.position="left", t = -20, b = 20)
dev.off()
expr_df
devtools::load_all()
library(scomicsdb)
library(httr)
library(jsonlite)
library(ggplot2)
library(cowplot)
library(ggforce)
library(dplyr)
library(Seurat)
library(Gviz)
library(GenomicRanges)
library(biomaRt)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(ggdendro)
library(cowplot)
library(ggtree) # install with `devtools::install_github("YuLab-SMU/ggtree")` as you need a version newer than what bioconductor serves
library(patchwork)
library(aplot)
library(ggplotify)
library(RColorBrewer)
gene = "HEY2"
celltype = "Cardiomyocyte"
expr_vec = query_exprssion("hg38", gene, celltype = TRUE)
link_res = query_linkage("hg38", gene, celltype = TRUE)
link_df = link_res[["linkage"]]
sample_df = link_res[["samples"]]
sample_df = sample_df[sample_df$bio_source %in% c("Heart right ventricle", "Left cardiac atrium"), ]
sample_df = sample_df[, c("sample_id", "bio_source")]
colnames(sample_df) = c("Sample", "Group")
link_df = link_df[link_df$sample %in% sample_df$Sample & link_df$celltype == celltype, ]
# link_df[, c("sample", "gene", "peak", "zscore", "source", "celltype")]
sample_df = sample_df[sample_df$Sample %in% link_df$sample, ]
sample_df = sample_df[order(sample_df$Group), ]
expr_df = data.frame(t(expr_vec)[paste0(sample_df$Sample, ".", celltype), ])
colnames(expr_df) = c("Gene")
rownames(expr_df) = sapply(rownames(expr_df), function(x) {unlist(strsplit(x, "\\."))[1]})
expr_df$Sample = rownames(expr_df)
link_df$sample_id = link_df$sample
nrow(link_df)
scheme <- getScheme()
scheme$GdObject$cex.axis = 1
addScheme(scheme, "myScheme")
options(Gviz.scheme="myScheme")
sample_df$Group = c(rep("Ventricle", 2), rep("Atrium", 2))
pdf("Heatmap_celltype_cadiomyocytes_HEY2.pdf", width = 10, height = 6)
genome_track_map(link_df, sample_df, gene, expr_df, assembly = "hg38", legend.position="left", t = -10, b = 10)
dev.off()
scheme <- getScheme()
scheme$GdObject$cex.axis = 1
addScheme(scheme, "myScheme")
options(Gviz.scheme="myScheme")
sample_df$Group = c(rep("Ventricle", 2), rep("Atrium", 2))
pdf("Heatmap_celltype_cadiomyocytes_HEY2.pdf", width = 10, height = 6)
genome_track_map(link_df, sample_df, gene, expr_df, assembly = "hg38", legend.position="left", t = -30, b = 30)
dev.off()
ht_peak_order
### TFBS Analysis
track_plot = plot_genome_track(link_df, "HEY2", "hg38", sample_df$Sample)
peaks = track_plot[[length(track_plot)]]
peaks$name = as.character(peaks$name)
peak_order = make_peak_group(link_df, peaks, sample_df)
ht_peak_order = peak_order[peak_order[, 1] >=0.5 & peak_order[, 2]<0.5, ]
ht_peaks = rownames(ht_peak_order)
peak_vec = sub(":", "-", as.character(peaks))
ht_peaks = peak_vec[as.numeric(ht_peaks)]
tf = tf_binding("hg38", paste0(ht_peaks, collapse = "_"))
p = plot_giggle(tf)
# ggsave("Barplot_")
p
peak_order
### TFBS Analysis
track_plot = plot_genome_track(link_df, "HEY2", "hg38", sample_df$Sample)
peaks = track_plot[[length(track_plot)]]
peaks$name = as.character(peaks$name)
peak_order = make_peak_group(link_df, peaks, sample_df)
ht_peak_order = peak_order[peak_order[, 2] >=0.5 & peak_order[, 1]<0.5, ]
ht_peaks = rownames(ht_peak_order)
peak_vec = sub(":", "-", as.character(peaks))
ht_peaks = peak_vec[as.numeric(ht_peaks)]
tf = tf_binding("hg38", paste0(ht_peaks, collapse = "_"))
p = plot_giggle(tf)
# ggsave("Barplot_")
p
### TFBS Analysis
track_plot = plot_genome_track(link_df, "HEY2", "hg38", sample_df$Sample)
peaks = track_plot[[length(track_plot)]]
peaks$name = as.character(peaks$name)
peak_order = make_peak_group(link_df, peaks, sample_df)
ht_peak_order = peak_order[peak_order[, 2] >=0.5 & peak_order[, 1]<0.5, ]
ht_peaks = rownames(ht_peak_order)
peak_vec = sub(":", "-", as.character(peaks))
ht_peaks = peak_vec[as.numeric(ht_peaks)]
tf = tf_binding("hg38", paste0(ht_peaks, collapse = "_"))
p = plot_giggle(tf)
ggsave("Barplot_HEY2_Ventricle_specific_TFs.pdf", p, width = 5, height = 6)
### TFBS Analysis
track_plot = plot_genome_track(link_df, "HEY2", "hg38", sample_df$Sample)
peaks = track_plot[[length(track_plot)]]
peaks$name = as.character(peaks$name)
peak_order = make_peak_group(link_df, peaks, sample_df)
ht_peak_order = peak_order[peak_order[, 2] >=0.5 & peak_order[, 1]<0.5, ]
ht_peaks = rownames(ht_peak_order)
peak_vec = sub(":", "-", as.character(peaks))
ht_peaks = peak_vec[as.numeric(ht_peaks)]
tf = tf_binding("hg38", paste0(ht_peaks, collapse = "_"))
p = plot_giggle(tf)
ggsave("Barplot_HEY2_Ventricle_specific_TFs.pdf", p, width = 5, height = 5)
p
### TFBS Analysis
track_plot = plot_genome_track(link_df, "HEY2", "hg38", sample_df$Sample)
peaks = track_plot[[length(track_plot)]]
peaks$name = as.character(peaks$name)
peak_order = make_peak_group(link_df, peaks, sample_df)
ht_peak_order = peak_order[peak_order[, 2] >=0.5 & peak_order[, 1]<0.5, ]
ht_peaks = rownames(ht_peak_order)
peak_vec = sub(":", "-", as.character(peaks))
ht_peaks = peak_vec[as.numeric(ht_peaks)]
tf = tf_binding("hg38", paste0(ht_peaks, collapse = "_"))
p = plot_giggle(tf)
ggsave("Barplot_HEY2_Ventricle_specific_TFs.pdf", p, width = 5, height = 5)
tf
install.packages("ggwordcloud")
View(tf)
library(ggwordcloud)
ggplot(tf, aes(label = Factor, size = combo_score)) +
geom_text_wordcloud() +
scale_size_area(max_size = 30) +
theme_minimal()
library(ggwordcloud)
ggplot(tf, aes(label = Factor, size = combo_score)) +
geom_text_wordcloud() +
theme_minimal()
library(ggwordcloud)
ggplot(tf[1:20, ], aes(label = Factor, size = combo_score)) +
geom_text_wordcloud() +
theme_minimal()
library(ggwordcloud)
ggplot(tf[1:50, ], aes(label = Factor, size = combo_score)) +
geom_text_wordcloud() +
theme_minimal()
library(ggwordcloud)
p = ggplot(tf[1:50, ], aes(label = Factor, size = combo_score)) +
geom_text_wordcloud() +
theme_minimal()
ggsave("Wordcloud_HEY2_Ventricle_specific_TFs.pdf", p, width = 5, height = 5)
library(ggwordcloud)
p = ggplot(tf[1:50, ], aes(label = Factor, size = combo_score)) +
geom_text_wordcloud() +
theme_minimal()
ggsave("Wordcloud_HEY2_Ventricle_specific_TFs.pdf", p, width = 6, height = 5)
